# 将数字转换为包含四个数的列表，
# 在SM4算法中主要将128bit的输入转换为4个32bit字以及将32bit字转换为4个8bit的字节。
def num2list(number, digit):
    mask = 2 ** digit - 1
    res = []
    for i in range(4):
        res.append((number >> (i * digit)) & mask)
    res = list(reversed(res)) if digit == 32 else res
    return res


# 将包含四个数的列表转换为数字，
# 在SM4算法中主要将4个32bit字转换为128bit的输出以及将4个8bit的字节转换为32bit字。
def list2num(num_list, digit):
    Sum = 0
    factor = 1
    for i in range(4):
        Sum += num_list[i] * factor
        factor = factor << digit
    return Sum


class sm4_keys():
    # 初始化类，将整型keys转换为列表形式，同时定义相关的表
    def __init__(self, keys):
        self.keys = num2list(keys, 32)
        self.s = [
            0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
            0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
            0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
            0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
            0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
            0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
            0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
            0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
            0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
            0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
            0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
            0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
            0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
            0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
            0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
            0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48,
        ]
        self.fk = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]
        self.ck = [
            0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
            0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
            0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
            0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
            0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
            0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
            0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
            0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
        ]

    # 输入字，将其经过S盒变化，输入->字，输出->字
    def S(self, word):
        Bytes = num2list(word, 8)
        num_list = [self.S_byte(Bytes[i]) for i in range(4)]
        Sum = list2num(num_list, 8)
        return Sum

    # 查找S盒替换相对应的字节，输入->字节，输出->字节
    def S_byte(self, byte):
        row = byte >> 4
        col = byte & 0xf
        return self.s[row * 16 + col]

    # L函数的实现，word为输入的字，dig_list为循环左移位数构成的列表，将每次循环左移后的值进行异或
    def L(self, word, dig_list):
        res = 0
        for digit in dig_list:
            res = res ^ self.rotate_left(word, digit)
        return res

    # 循环左移的实现代码，digit为循环左移的位数
    def rotate_left(self, word, digit):
        high = word >> (32 - digit)
        res = high + (word << digit) & 0xffffffff
        return res

    # 密钥扩展算法轮函数，每次扩展keys列表
    def epoch_func(self, keys, epoch):
        S_input = keys[-3] ^ keys[-2] ^ keys[-1] ^ self.ck[epoch]
        K = keys[-4] ^ self.L(self.S(S_input), [0, 13, 23])
        keys.append(K)
        return keys

    # 密钥扩展函数,获取扩展后的密钥
    def extend(self):
        keys = []
        for key, fk in zip(self.keys, self.fk):
            keys.append(key ^ fk)
        for i in range(32):
            keys = self.epoch_func(keys, i)
        return keys[4:]


class sm4():
    # 初始化sm4算法，获得轮密钥
    def __init__(self, keys):
        self.Sm4_keys = sm4_keys(keys)
        self.keys = self.Sm4_keys.extend()

    # sm4算法轮函数，使用了sm4_keys算法中的实现方法
    def F(self, messages, epoch):
        S_input = messages[1] ^ messages[2] ^ messages[3] ^ self.keys[epoch]
        M = messages[0] ^ self.Sm4_keys.L(self.Sm4_keys.S(S_input), [0, 2, 10, 18, 24])
        messages.append(M)
        return messages[1:]

    # sm4加密函数 int -> int
    def encryption(self, M):
        messages = num2list(M, 32)
        for i in range(32):
            messages = self.F(messages, i)
        Sum = list2num(messages, 32)
        return Sum

    # sm4解密函数 int -> int
    def decryption(self, C):
        messages = num2list(C, 32)
        for i in range(32):
            messages = self.F(messages, 31 - i)
        Sum = list2num(messages, 32)
        return Sum


if __name__ == "__main__":
    keys = 0x0123456789abcdeffedcba9876543210
    M = 0x0123456789abcdeffedcba9876543210
    Sm4 = sm4(keys)
    C = Sm4.encryption(M)
    print(hex(C))
    M = Sm4.decryption(C)
    print(hex(M))
